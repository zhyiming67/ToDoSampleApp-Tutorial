{"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[{"kind":"hero","title":"Data Manipulation","chapter":"DataStore Essentials","estimatedTimeInMinutes":15,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial guides you through creating, updating, querying, and deleting ToDoitem with DataStore."}]}]},{"kind":"tasks","tasks":[{"anchor":"Generate-a-DataStore-Manipulation-File","title":"Generate a DataStore Manipulation File","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a file named "},{"type":"codeVoice","code":"\"ToDoEnvironment\""},{"type":"text","text":" to manipulate ToDoitem using Amplify templates."}]}],"mediaPosition":"trailing","layout":"horizontal"}],"stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Right click "},{"type":"codeVoice","code":"\"Todo\""},{"type":"text","text":" folder and select "},{"type":"codeVoice","code":"\"New File...\""},{"type":"text","text":". Select "},{"type":"codeVoice","code":"\"DataStoreManipulation\""},{"type":"text","text":" template under "},{"type":"codeVoice","code":"\"Amplify\""},{"type":"text","text":" column and select the "},{"type":"codeVoice","code":"\"Next\""},{"type":"text","text":" button."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"chooseDataStoreTemplate.png"},{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Fill in the name "},{"type":"codeVoice","code":"\"ToDoEnvironment\""},{"type":"text","text":" and select the "},{"type":"codeVoice","code":"\"Next\""},{"type":"text","text":" button. Then select "},{"type":"codeVoice","code":"\"Create\""},{"type":"text","text":" button. Now that DataStore manipulation file is created and "},{"type":"codeVoice","code":"\"ToDoEnvironment.swift\""},{"type":"text","text":" is the main file to deal with ToDoItem."}]}],"caption":[],"type":"step","runtimePreview":null,"media":"fillEnvironmentName.png"}]},{"anchor":"Implement-the-ToDoEnvironment-Class","title":"Implement the ToDoEnvironment Class","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the ToDo app, you’ll implement the class "},{"type":"codeVoice","code":"\"ToDoEnvironment\""},{"type":"text","text":" to manipulate ToDoItem."}]}],"mediaPosition":"trailing","layout":"horizontal"}],"stepsSection":[{"code":"ToDoEnvironment.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"\"ToDoEnvironment.swift\""},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a class called "},{"type":"codeVoice","code":"\"ToDoEnvironment\""},{"type":"text","text":" and add DataStore manipulation functions into it."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add necessay published variables in "},{"type":"codeVoice","code":"\"ToDoEnvironment\""},{"type":"text","text":" class. "},{"type":"codeVoice","code":"\"showingDetail\""},{"type":"text","text":": a non-optional bool variable that controls changes of the view. "},{"type":"codeVoice","code":"\"toDoItems\""},{"type":"text","text":": an array to store ToDoItems. "},{"type":"codeVoice","code":"\"selectedToDoItem\""},{"type":"text","text":": an optional ToDoItem variable that store current Todo item information."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create an "},{"type":"codeVoice","code":"\"init\""},{"type":"text","text":" function."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a "},{"type":"codeVoice","code":"\"logItems\""},{"type":"text","text":" function to monitor "},{"type":"codeVoice","code":"\"toDoItems\""},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Create-a-ToDoItem","title":"Create a ToDoItem","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You need a function to create a ToDoItem and save it to DataStore."}]}],"mediaPosition":"trailing","layout":"horizontal"}],"stepsSection":[{"code":"ToDoEnvironment4-1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"\"ToDoEnvironment.swift\""},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment5.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a function called "},{"type":"codeVoice","code":"\"saveToDoItem\""},{"type":"text","text":". This function receives a toDoItem and saves it to DataStore."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the "},{"type":"codeVoice","code":"\"toDoItem\""},{"type":"text","text":" into the array "},{"type":"codeVoice","code":"toDoItems"},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment7.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Save the "},{"type":"codeVoice","code":"\"toDoItem\""},{"type":"text","text":" to DataStore using "},{"type":"codeVoice","code":"\"create\""},{"type":"text","text":" function."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment8.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sort the "},{"type":"codeVoice","code":"toDoItems"},{"type":"text","text":" to display as high, medium and low."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment9.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the log codes to monitor the save action and the "},{"type":"codeVoice","code":"\"toDoItem\""},{"type":"text","text":" after creation."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Update-a-ToDoItem","title":"Update a ToDoItem","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ll add codes in "},{"type":"codeVoice","code":"\"saveToDoItem\""},{"type":"text","text":" to update the ToDoItem in DataStore."}]}],"mediaPosition":"trailing","layout":"horizontal"}],"stepsSection":[{"code":"ToDoEnvironment9-1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"\"ToDoEnvironment.swift\""},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment10.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Find the index of the toDoItem."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment11.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Check the index to know whether the "},{"type":"codeVoice","code":"\"toDoItem\""},{"type":"text","text":" is in the "},{"type":"codeVoice","code":"\"todoItems\""},{"type":"text","text":", then still use "},{"type":"codeVoice","code":"\"create\""},{"type":"text","text":" function to update the "},{"type":"codeVoice","code":"\"toDoItem\""},{"type":"text","text":" in DataStore."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Tips: "},{"type":"codeVoice","code":"\"create\""},{"type":"text","text":" function checkes "},{"type":"codeVoice","code":"\"id\""},{"type":"text","text":" to determine whether the item exists. If the item exists, it will update the existing item. If not, it will create a new item in DataStore."}]}],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Request-ToDoItems","title":"Request ToDoItems","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ll create a function to query all ToDoItems in DataStore which are displayed in the ToDo list."}]}],"mediaPosition":"trailing","layout":"horizontal"}],"stepsSection":[{"code":"ToDoEnvironment11-1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"\"ToDoEnvironment.swift\""},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment12.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a function called "},{"type":"codeVoice","code":"\"initTodo\""},{"type":"text","text":". This function is called when the app launches and queries all "},{"type":"codeVoice","code":"\"toDoItem\""},{"type":"text","text":" in DataStore and stores them in "},{"type":"codeVoice","code":"\"toDoItems\""},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment13.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Query all "},{"type":"codeVoice","code":"\"toDoItem\""},{"type":"text","text":" in DataStore using "},{"type":"codeVoice","code":"\"queryAll\""},{"type":"text","text":" function. "},{"type":"codeVoice","code":"\"queryAll\""},{"type":"text","text":" requires any instance of "},{"type":"codeVoice","code":"\"ToDoItem\""},{"type":"text","text":" to get the type."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment14.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Put todo items in "},{"type":"codeVoice","code":"\"toDoItems\""},{"type":"text","text":" and sort it."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]},{"anchor":"Remove-ToDoItems","title":"Remove ToDoItems","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ll create three functions to remove ToDoItem based on different situations."}]}],"mediaPosition":"trailing","layout":"horizontal"}],"stepsSection":[{"code":"ToDoEnvironment14-1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"\"ToDoEnvironment.swift\""},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment15.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a function called "},{"type":"codeVoice","code":"\"deleteToDoItem\""},{"type":"text","text":". This function receives a "},{"type":"codeVoice","code":"\"ToDoItem\""},{"type":"text","text":" and deletes it from DataStore."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment16.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Get the index of the "},{"type":"codeVoice","code":"\"toDoItem\""},{"type":"text","text":", remove it from the "},{"type":"codeVoice","code":"\"toDoItems\""},{"type":"text","text":" and delete it from DataStore using "},{"type":"codeVoice","code":"\"delete\""},{"type":"text","text":" function."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment17.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create another "},{"type":"codeVoice","code":"\"deleteToDoItem\""},{"type":"text","text":" function. This function receives a "},{"type":"codeVoice","code":"\"IndexSet\""},{"type":"text","text":" and deletes multiple "},{"type":"codeVoice","code":"\"ToDoItem\""},{"type":"text","text":" from DataStore."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment18.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a "},{"type":"codeVoice","code":"\"disappearCompletedItems\""},{"type":"text","text":" function. This function receives a "},{"type":"codeVoice","code":"\"Double\""},{"type":"text","text":" and deletes multiple "},{"type":"codeVoice","code":"\"ToDoItem\""},{"type":"text","text":" from DataStore when a certain amount of time is reached after they are completed."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"You just reached a very cool checkpoint. You have a fully featured CRUD application that saves and retrieves data in the local device, which means the app works without an AWS account and even without internet connection."}]}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/UI","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Implement the UI Interface","abstract":[{"type":"text","text":"This tutorial guides you through builidng the interface of ToDo app and interacting with DataStore."}]}],"identifier":{"url":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/DataManipulation","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Data Manipulation","categoryPathComponent":"Tutorial-Table-of-Contents","role":"project","category":"GettingStarted"},"hierarchy":{"modules":[{"reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/Tutorial-Table-of-Contents\/Set-Up-Fullstack-Project","projects":[{"reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/Prerequisites","sections":[{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/Prerequisites#Prerequisites"}]},{"reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/Set-up","sections":[{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/Set-up#Create-a-New-iOS-Application"},{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/Set-up#Add-Amplify-to-Your-Application"}]}]},{"reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/Tutorial-Table-of-Contents\/DataStore-Essentials","projects":[{"reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/GenerateModel","sections":[{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/GenerateModel#Generate-Model-Files"},{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/GenerateModel#Add-Extension-for-Generated-Model-Files"},{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/GenerateModel#Configure-Amplify-and-DataStore"}]},{"reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/DataManipulation","sections":[{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/DataManipulation#Generate-a-DataStore-Manipulation-File"},{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/DataManipulation#Implement-the-ToDoEnvironment-Class"},{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/DataManipulation#Create-a-ToDoItem"},{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/DataManipulation#Update-a-ToDoItem"},{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/DataManipulation#Request-ToDoItems"},{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/DataManipulation#Remove-ToDoItems"}]}]},{"reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/Tutorial-Table-of-Contents\/UI-Integration","projects":[{"reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/UI","sections":[{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/UI#Create-UI-Components"},{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/UI#Create-UI-Interfaces"}]}]},{"reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/Tutorial-Table-of-Contents\/Cloud-Connection","projects":[{"reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/ConnectCloud","sections":[{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/ConnectCloud#Provision-Backend"},{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/ConnectCloud#Add-a-Subscription"},{"kind":"task","reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/ConnectCloud#Query-for-Mutations-Using-the-Console"}]}]}],"reference":"doc:\/\/Amazon.GettingStarted\/tutorials\/Tutorial-Table-of-Contents","paths":[["doc:\/\/Amazon.GettingStarted\/tutorials\/Tutorial-Table-of-Contents","doc:\/\/Amazon.GettingStarted\/tutorials\/Tutorial-Table-of-Contents\/$volume","doc:\/\/Amazon.GettingStarted\/tutorials\/Tutorial-Table-of-Contents\/DataStore-Essentials"]]},"documentVersion":0,"references":{"ToDoEnvironment1.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment1.swift","type":"file","fileType":"swift","highlights":[{"line":4},{"line":5},{"line":70}]},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/DataManipulation#Request-ToDoItems":{"role":"pseudoSymbol","title":"Request ToDoItems","abstract":[{"type":"text","text":"This tutorial guides you through creating, updating, querying, and deleting ToDoitem with DataStore."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/DataManipulation#Request-ToDoItems","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/datamanipulation#Request-ToDoItems"},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/GenerateModel#Add-Extension-for-Generated-Model-Files":{"role":"pseudoSymbol","title":"Add Extension for Generated Model Files","abstract":[{"type":"text","text":"This tutorial guides you through generating model files and initializing Amplify."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/GenerateModel#Add-Extension-for-Generated-Model-Files","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/generatemodel#Add-Extension-for-Generated-Model-Files"},"doc://Amazon.GettingStarted/tutorials/Tutorial-Table-of-Contents":{"role":"overview","title":"Meet Amplify!","abstract":[{"type":"text","text":"In this tutorial, you will:"}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/Tutorial-Table-of-Contents","kind":"overview","type":"topic","url":"\/tutorials\/tutorial-table-of-contents"},"ToDoEnvironment13.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        let index = toDoItems.firstIndex {","            $0.id == toDoItem.id","        }","        ","        if let index = index {","            print(\"Updating Item: \\(toDoItem)\")","            toDoItems[index] = toDoItem","            create(item: toDoItem)","        } else {","            print(\"Adding Item: \\(toDoItem)\")","            toDoItems.append(toDoItem)","            create(item: toDoItem)","        }","        ","        \/\/\/Sort as H M L","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","        ","        print(\"Saved item!\")","        logItems()","    }","    ","    \/\/\/Query all todo items in DataStore and put them into todoItems","    public func initTodo() {","        let todos = queryAll(type: ToDoItem())","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment13.swift","type":"file","fileType":"swift","highlights":[{"line":55}]},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/Prerequisites":{"role":"project","title":"Prerequisites","estimatedTime":"5min","abstract":[{"type":"text","text":"This tutorial guides you through preparation for building an iOS App with Amplify."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/Prerequisites","kind":"project","type":"topic","url":"\/tutorials\/gettingstartedtutorial\/prerequisites"},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/UI":{"role":"project","title":"Implement the UI Interface","estimatedTime":"15min","abstract":[{"type":"text","text":"This tutorial guides you through builidng the interface of ToDo app and interacting with DataStore."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/UI","kind":"project","type":"topic","url":"\/tutorials\/gettingstartedtutorial\/ui"},"ToDoEnvironment5.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        ","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment5.swift","type":"file","fileType":"swift","highlights":[{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20}]},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/Prerequisites#Prerequisites":{"role":"pseudoSymbol","title":"Prerequisites","abstract":[{"type":"text","text":"This tutorial guides you through preparation for building an iOS App with Amplify."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/Prerequisites#Prerequisites","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/prerequisites#Prerequisites"},"ToDoEnvironment9-1.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        print(\"Adding Item: \\(toDoItem)\")","        toDoItems.append(toDoItem)","        create(item: toDoItem)","        ","        \/\/\/Sort as H M L","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","        ","        print(\"Saved item!\")","        logItems()","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment9-1.swift","type":"file","fileType":"swift","highlights":[]},"ToDoEnvironment3.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment3.swift","type":"file","fileType":"swift","highlights":[{"line":12},{"line":13}]},"doc://Amazon.GettingStarted/tutorials/Tutorial-Table-of-Contents/DataStore-Essentials":{"role":"article","title":"DataStore Essentials","abstract":[],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/Tutorial-Table-of-Contents\/DataStore-Essentials","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/datastore-essentials"},"doc://Amazon.GettingStarted/tutorials/Tutorial-Table-of-Contents/UI-Integration":{"role":"article","title":"UI Integration","abstract":[],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/Tutorial-Table-of-Contents\/UI-Integration","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/ui-integration"},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/GenerateModel#Configure-Amplify-and-DataStore":{"role":"pseudoSymbol","title":"Configure Amplify and DataStore","abstract":[{"type":"text","text":"This tutorial guides you through generating model files and initializing Amplify."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/GenerateModel#Configure-Amplify-and-DataStore","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/generatemodel#Configure-Amplify-and-DataStore"},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/Set-up#Add-Amplify-to-Your-Application":{"role":"pseudoSymbol","title":"Add Amplify to Your Application","abstract":[{"type":"text","text":"This tutorial guides you through setting up an iOS application configured with Amplify."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/Set-up#Add-Amplify-to-Your-Application","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/set-up#Add-Amplify-to-Your-Application"},"doc://Amazon.GettingStarted/tutorials/Tutorial-Table-of-Contents/Cloud-Connection":{"role":"article","title":"Cloud Connection","abstract":[],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/Tutorial-Table-of-Contents\/Cloud-Connection","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/cloud-connection"},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/GenerateModel#Generate-Model-Files":{"role":"pseudoSymbol","title":"Generate Model Files","abstract":[{"type":"text","text":"This tutorial guides you through generating model files and initializing Amplify."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/GenerateModel#Generate-Model-Files","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/generatemodel#Generate-Model-Files"},"ToDoEnvironment6.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        print(\"Adding Item: \\(toDoItem)\")","        toDoItems.append(toDoItem)","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment6.swift","type":"file","fileType":"swift","highlights":[{"line":18},{"line":19}]},"ToDoEnvironment11-1.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        let index = toDoItems.firstIndex {","            $0.id == toDoItem.id","        }","        ","        if let index = index {","            print(\"Updating Item: \\(toDoItem)\")","            toDoItems[index] = toDoItem","            create(item: toDoItem)","        } else {","            print(\"Adding Item: \\(toDoItem)\")","            toDoItems.append(toDoItem)","            create(item: toDoItem)","        }","        ","        \/\/\/Sort as H M L","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","        ","        print(\"Saved item!\")","        logItems()","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment11-1.swift","type":"file","fileType":"swift","highlights":[]},"ToDoEnvironment9.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        print(\"Adding Item: \\(toDoItem)\")","        toDoItems.append(toDoItem)","        create(item: toDoItem)","        ","        \/\/\/Sort as H M L","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","        ","        print(\"Saved item!\")","        logItems()","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment9.swift","type":"file","fileType":"swift","highlights":[{"line":38},{"line":39},{"line":40}]},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/DataManipulation#Create-a-ToDoItem":{"role":"pseudoSymbol","title":"Create a ToDoItem","abstract":[{"type":"text","text":"This tutorial guides you through creating, updating, querying, and deleting ToDoitem with DataStore."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/DataManipulation#Create-a-ToDoItem","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/datamanipulation#Create-a-ToDoItem"},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/ConnectCloud#Provision-Backend":{"role":"pseudoSymbol","title":"Provision Backend","abstract":[{"type":"text","text":"This tutorial guides you through connecting your local data to synchronize to a cloud backend."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/ConnectCloud#Provision-Backend","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/connectcloud#Provision-Backend"},"ToDoEnvironment14-1.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        let index = toDoItems.firstIndex {","            $0.id == toDoItem.id","        }","        ","        if let index = index {","            print(\"Updating Item: \\(toDoItem)\")","            toDoItems[index] = toDoItem","            create(item: toDoItem)","        } else {","            print(\"Adding Item: \\(toDoItem)\")","            toDoItems.append(toDoItem)","            create(item: toDoItem)","        }","        ","        \/\/\/Sort as H M L","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","        ","        print(\"Saved item!\")","        logItems()","    }","    ","    \/\/\/Query all todo items in DataStore and put them into todoItems","    public func initTodo() {","        let todos = queryAll(type: ToDoItem())","        for todo in todos {","            toDoItems.append(todo)","        }","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment14-1.swift","type":"file","fileType":"swift","highlights":[]},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/DataManipulation#Remove-ToDoItems":{"role":"pseudoSymbol","title":"Remove ToDoItems","abstract":[{"type":"text","text":"This tutorial guides you through creating, updating, querying, and deleting ToDoitem with DataStore."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/DataManipulation#Remove-ToDoItems","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/datamanipulation#Remove-ToDoItems"},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/GenerateModel":{"role":"project","title":"Configuration","estimatedTime":"10min","abstract":[{"type":"text","text":"This tutorial guides you through generating model files and initializing Amplify."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/GenerateModel","kind":"project","type":"topic","url":"\/tutorials\/gettingstartedtutorial\/generatemodel"},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/ConnectCloud#Query-for-Mutations-Using-the-Console":{"role":"pseudoSymbol","title":"Query for Mutations Using the Console","abstract":[{"type":"text","text":"This tutorial guides you through connecting your local data to synchronize to a cloud backend."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/ConnectCloud#Query-for-Mutations-Using-the-Console","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/connectcloud#Query-for-Mutations-Using-the-Console"},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/DataManipulation#Update-a-ToDoItem":{"role":"pseudoSymbol","title":"Update a ToDoItem","abstract":[{"type":"text","text":"This tutorial guides you through creating, updating, querying, and deleting ToDoitem with DataStore."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/DataManipulation#Update-a-ToDoItem","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/datamanipulation#Update-a-ToDoItem"},"ToDoEnvironment18.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        let index = toDoItems.firstIndex {","            $0.id == toDoItem.id","        }","        ","        if let index = index {","            print(\"Updating Item: \\(toDoItem)\")","            toDoItems[index] = toDoItem","            create(item: toDoItem)","        } else {","            print(\"Adding Item: \\(toDoItem)\")","            toDoItems.append(toDoItem)","            create(item: toDoItem)","        }","        ","        \/\/\/Sort as H M L","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","        ","        print(\"Saved item!\")","        logItems()","    }","    ","    \/\/\/Query all todo items in DataStore and put them into todoItems","    public func initTodo() {","        let todos = queryAll(type: ToDoItem())","        for todo in todos {","            toDoItems.append(todo)","        }","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","    }","    ","    public func remove(toDoItem: ToDoItem) {","        if let index = toDoItems.firstIndex(of: toDoItem) {","            toDoItems.remove(at: index)","            print(\"Removed item!\")","            logItems()","            delete(item: toDoItem)","        }","    }","    ","    public func remove(at indexSet: IndexSet) {","        for index in indexSet {","            let toDoItem = toDoItems[index]","            delete(item: toDoItem)","        }","        ","        toDoItems.remove(atOffsets: indexSet)","        logItems()","    }","    ","    public func disappearCompletedItems(showTime: Double) {","        for item in toDoItems {","            if let completedTime = item.completedAt {","                if (completedTime.foundationDate.timeIntervalSinceNow <= showTime) {","                remove(toDoItem: item)","                }","            }","        }","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment18.swift","type":"file","fileType":"swift","highlights":[{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104}]},"chooseDataStoreTemplate.png":{"alt":"choose DataStore template","type":"image","identifier":"chooseDataStoreTemplate.png","variants":[{"url":"\/images\/chooseDataStoreTemplate.png","size":{"width":1452,"height":1028},"traits":["1x","light"]}]},"ToDoEnvironment17.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        let index = toDoItems.firstIndex {","            $0.id == toDoItem.id","        }","        ","        if let index = index {","            print(\"Updating Item: \\(toDoItem)\")","            toDoItems[index] = toDoItem","            create(item: toDoItem)","        } else {","            print(\"Adding Item: \\(toDoItem)\")","            toDoItems.append(toDoItem)","            create(item: toDoItem)","        }","        ","        \/\/\/Sort as H M L","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","        ","        print(\"Saved item!\")","        logItems()","    }","    ","    \/\/\/Query all todo items in DataStore and put them into todoItems","    public func initTodo() {","        let todos = queryAll(type: ToDoItem())","        for todo in todos {","            toDoItems.append(todo)","        }","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","    }","    ","    public func remove(toDoItem: ToDoItem) {","        if let index = toDoItems.firstIndex(of: toDoItem) {","            toDoItems.remove(at: index)","            print(\"Removed item!\")","            logItems()","            delete(item: toDoItem)","        }","    }","    ","    public func remove(at indexSet: IndexSet) {","        for index in indexSet {","            let toDoItem = toDoItems[index]","            delete(item: toDoItem)","        }","        ","        toDoItems.remove(atOffsets: indexSet)","        logItems()","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment17.swift","type":"file","fileType":"swift","highlights":[{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94}]},"ToDoEnvironment12.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        let index = toDoItems.firstIndex {","            $0.id == toDoItem.id","        }","        ","        if let index = index {","            print(\"Updating Item: \\(toDoItem)\")","            toDoItems[index] = toDoItem","            create(item: toDoItem)","        } else {","            print(\"Adding Item: \\(toDoItem)\")","            toDoItems.append(toDoItem)","            create(item: toDoItem)","        }","        ","        \/\/\/Sort as H M L","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","        ","        print(\"Saved item!\")","        logItems()","    }","    ","    \/\/\/Query all todo items in DataStore and put them into todoItems","    public func initTodo() {","        ","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment12.swift","type":"file","fileType":"swift","highlights":[{"line":53},{"line":54},{"line":55},{"line":56},{"line":57}]},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/DataManipulation#Implement-the-ToDoEnvironment-Class":{"role":"pseudoSymbol","title":"Implement the ToDoEnvironment Class","abstract":[{"type":"text","text":"This tutorial guides you through creating, updating, querying, and deleting ToDoitem with DataStore."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/DataManipulation#Implement-the-ToDoEnvironment-Class","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/datamanipulation#Implement-the-ToDoEnvironment-Class"},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/Set-up":{"role":"project","title":"Set Up Your Application","estimatedTime":"5min","abstract":[{"type":"text","text":"This tutorial guides you through setting up an iOS application configured with Amplify."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/Set-up","kind":"project","type":"topic","url":"\/tutorials\/gettingstartedtutorial\/set-up"},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/DataManipulation":{"role":"project","title":"Data Manipulation","estimatedTime":"15min","abstract":[{"type":"text","text":"This tutorial guides you through creating, updating, querying, and deleting ToDoitem with DataStore."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/DataManipulation","kind":"project","type":"topic","url":"\/tutorials\/gettingstartedtutorial\/datamanipulation"},"ToDoEnvironment14.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        let index = toDoItems.firstIndex {","            $0.id == toDoItem.id","        }","        ","        if let index = index {","            print(\"Updating Item: \\(toDoItem)\")","            toDoItems[index] = toDoItem","            create(item: toDoItem)","        } else {","            print(\"Adding Item: \\(toDoItem)\")","            toDoItems.append(toDoItem)","            create(item: toDoItem)","        }","        ","        \/\/\/Sort as H M L","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","        ","        print(\"Saved item!\")","        logItems()","    }","    ","    \/\/\/Query all todo items in DataStore and put them into todoItems","    public func initTodo() {","        let todos = queryAll(type: ToDoItem())","        for todo in todos {","            toDoItems.append(todo)","        }","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment14.swift","type":"file","fileType":"swift","highlights":[{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":65},{"line":66},{"line":67},{"line":68},{"line":69},{"line":70},{"line":71},{"line":72},{"line":73}]},"ToDoEnvironment2.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment2.swift","type":"file","fileType":"swift","highlights":[{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}]},"fillEnvironmentName.png":{"alt":"fill in the name","type":"image","identifier":"fillEnvironmentName.png","variants":[{"url":"\/images\/fillEnvironmentName.png","size":{"width":1448,"height":1026},"traits":["1x","light"]}]},"ToDoEnvironment11.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        let index = toDoItems.firstIndex {","            $0.id == toDoItem.id","        }","        ","        if let index = index {","            print(\"Updating Item: \\(toDoItem)\")","            toDoItems[index] = toDoItem","            create(item: toDoItem)","        } else {","            print(\"Adding Item: \\(toDoItem)\")","            toDoItems.append(toDoItem)","            create(item: toDoItem)","        }","        ","        \/\/\/Sort as H M L","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","        ","        print(\"Saved item!\")","        logItems()","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment11.swift","type":"file","fileType":"swift","highlights":[{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}]},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/ConnectCloud":{"role":"project","title":"Connect to the Cloud","estimatedTime":"10min","abstract":[{"type":"text","text":"This tutorial guides you through connecting your local data to synchronize to a cloud backend."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/ConnectCloud","kind":"project","type":"topic","url":"\/tutorials\/gettingstartedtutorial\/connectcloud"},"ToDoEnvironment.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","","","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment.swift","type":"file","fileType":"swift","highlights":[]},"ToDoEnvironment4-1.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment4-1.swift","type":"file","fileType":"swift","highlights":[]},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/ConnectCloud#Add-a-Subscription":{"role":"pseudoSymbol","title":"Add a Subscription","abstract":[{"type":"text","text":"This tutorial guides you through connecting your local data to synchronize to a cloud backend."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/ConnectCloud#Add-a-Subscription","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/connectcloud#Add-a-Subscription"},"ToDoEnvironment16.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        let index = toDoItems.firstIndex {","            $0.id == toDoItem.id","        }","        ","        if let index = index {","            print(\"Updating Item: \\(toDoItem)\")","            toDoItems[index] = toDoItem","            create(item: toDoItem)","        } else {","            print(\"Adding Item: \\(toDoItem)\")","            toDoItems.append(toDoItem)","            create(item: toDoItem)","        }","        ","        \/\/\/Sort as H M L","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","        ","        print(\"Saved item!\")","        logItems()","    }","    ","    \/\/\/Query all todo items in DataStore and put them into todoItems","    public func initTodo() {","        let todos = queryAll(type: ToDoItem())","        for todo in todos {","            toDoItems.append(todo)","        }","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","    }","    ","    public func remove(toDoItem: ToDoItem) {","        if let index = toDoItems.firstIndex(of: toDoItem) {","            toDoItems.remove(at: index)","            print(\"Removed item!\")","            logItems()","            delete(item: toDoItem)","        }","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment16.swift","type":"file","fileType":"swift","highlights":[{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82}]},"ToDoEnvironment15.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        let index = toDoItems.firstIndex {","            $0.id == toDoItem.id","        }","        ","        if let index = index {","            print(\"Updating Item: \\(toDoItem)\")","            toDoItems[index] = toDoItem","            create(item: toDoItem)","        } else {","            print(\"Adding Item: \\(toDoItem)\")","            toDoItems.append(toDoItem)","            create(item: toDoItem)","        }","        ","        \/\/\/Sort as H M L","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","        ","        print(\"Saved item!\")","        logItems()","    }","    ","    \/\/\/Query all todo items in DataStore and put them into todoItems","    public func initTodo() {","        let todos = queryAll(type: ToDoItem())","        for todo in todos {","            toDoItems.append(todo)","        }","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","    }","    ","    public func remove(toDoItem: ToDoItem) {","","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment15.swift","type":"file","fileType":"swift","highlights":[{"line":76},{"line":77},{"line":78},{"line":79}]},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/DataManipulation#Generate-a-DataStore-Manipulation-File":{"role":"pseudoSymbol","title":"Generate a DataStore Manipulation File","abstract":[{"type":"text","text":"This tutorial guides you through creating, updating, querying, and deleting ToDoitem with DataStore."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/DataManipulation#Generate-a-DataStore-Manipulation-File","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/datamanipulation#Generate-a-DataStore-Manipulation-File"},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/UI#Create-UI-Components":{"role":"pseudoSymbol","title":"Create UI Components","abstract":[{"type":"text","text":"This tutorial guides you through builidng the interface of ToDo app and interacting with DataStore."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/UI#Create-UI-Components","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/ui#Create-UI-Components"},"ToDoEnvironment8.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        print(\"Adding Item: \\(toDoItem)\")","        toDoItems.append(toDoItem)","        create(item: toDoItem)","        ","        \/\/\/Sort as H M L","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment8.swift","type":"file","fileType":"swift","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37}]},"ToDoEnvironment10.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        let index = toDoItems.firstIndex {","            $0.id == toDoItem.id","        }","        ","        print(\"Adding Item: \\(toDoItem)\")","        toDoItems.append(toDoItem)","        create(item: toDoItem)","        ","        \/\/\/Sort as H M L","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                if $1.priority == ToDoPriority.low {","                    return true","                }","                else {","                    return false","                }","            case ToDoPriority.high:","                return true","            }","        })","        ","        print(\"Saved item!\")","        logItems()","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment10.swift","type":"file","fileType":"swift","highlights":[{"line":18},{"line":19},{"line":20},{"line":21}]},"ToDoEnvironment7.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        print(\"Adding Item: \\(toDoItem)\")","        toDoItems.append(toDoItem)","        create(item: toDoItem)","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment7.swift","type":"file","fileType":"swift","highlights":[{"line":20}]},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/Set-up#Create-a-New-iOS-Application":{"role":"pseudoSymbol","title":"Create a New iOS Application","abstract":[{"type":"text","text":"This tutorial guides you through setting up an iOS application configured with Amplify."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/Set-up#Create-a-New-iOS-Application","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/set-up#Create-a-New-iOS-Application"},"doc://Amazon.GettingStarted/tutorials/GettingStartedTutorial/UI#Create-UI-Interfaces":{"role":"pseudoSymbol","title":"Create UI Interfaces","abstract":[{"type":"text","text":"This tutorial guides you through builidng the interface of ToDo app and interacting with DataStore."}],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/GettingStartedTutorial\/UI#Create-UI-Interfaces","kind":"section","type":"section","url":"\/tutorials\/gettingstartedtutorial\/ui#Create-UI-Interfaces"},"doc://Amazon.GettingStarted/tutorials/Tutorial-Table-of-Contents/Set-Up-Fullstack-Project":{"role":"article","title":"Set Up Fullstack Project","abstract":[],"identifier":"doc:\/\/Amazon.GettingStarted\/tutorials\/Tutorial-Table-of-Contents\/Set-Up-Fullstack-Project","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/set-up-fullstack-project"},"ToDoEnvironment4.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    public init() {}","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { result in","                   switch(result) {","                   case .success(let savedItem):","                    print(\"Saved item: \\(savedItem.self)\")","                   case .failure(let error):","                       print(\"Could not save item to DataStore: \\(error)\")","                   }","                }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    print(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                print(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","               switch(result) {","               case .success(let todos):","                   items = todos","               case .failure(let error):","                   print(\"Could not query DataStore: \\(error)\")","               }","           }","        return items","    }","","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { result in","            switch(result) {","            case .success:","                print(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                print(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment4.swift","type":"file","fileType":"swift","highlights":[{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85}]}}}