{"schemaVersion":{"major":0,"minor":1,"patch":0},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial guides you through builidng the interface of ToDo app and interacting with DataStore."}]}],"estimatedTimeInMinutes":15,"title":"Implement UI","image":"","chapter":"UI Integration","kind":"hero","backgroundImage":""},{"kind":"tasks","tasks":[{"anchor":"Create-UI-Components","title":"Create UI Components","contentSection":[{"media":"","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this section, you’ll create five UI components for the ToDo app."}]}],"mediaPosition":"trailing","layout":"horizontal"}],"stepsSection":[{"code":"ToDoBlankView.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a SwiftUI View file named "},{"type":"codeVoice","code":"\"ToDoBlankView\""},{"type":"text","text":" and add the codes into the file. This view is displayed when the todo list is empty."}]}],"caption":[],"type":"step","runtimePreview":"blankView.png","media":null},{"code":"ToDoItemPriorityPicker.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a SwiftUI View file named "},{"type":"codeVoice","code":"\"ToDoItemPriorityPicker\""},{"type":"text","text":" and add the codes into the file. This view provides a picker to get the priority choice."}]}],"caption":[],"type":"step","runtimePreview":"picker.png","media":null},{"code":"ToDoCheckbox.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a SwiftUI View file named "},{"type":"codeVoice","code":"\"ToDoCheckbox\""},{"type":"text","text":" and add the codes into the file. This view displays the checkbox that matches the priority."}]}],"caption":[],"type":"step","runtimePreview":"checkbox.png","media":null},{"code":"ToDoCheckboxFill.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a SwiftUI View file named "},{"type":"codeVoice","code":"\"ToDoCheckboxFill\""},{"type":"text","text":" and add the codes into the file. This view displays the filled checkbox that matches the priority."}]}],"caption":[],"type":"step","runtimePreview":"checkboxFill.png","media":null},{"code":"ToDoListRow.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a SwiftUI View file named "},{"type":"codeVoice","code":"\"ToDoListRow\""},{"type":"text","text":" and add the codes into the file. This view displays the text of a todo item according to its completion."}]}],"caption":[],"type":"step","runtimePreview":"todoRow.png","media":null}]},{"anchor":"Create-Interfaces","title":"Create Interfaces","contentSection":[{"media":"","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this section, you’ll create three interfaces for the ToDo app."}]}],"mediaPosition":"trailing","layout":"horizontal"}],"stepsSection":[{"code":"ToDoItemDetail.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a SwiftUI View file named "},{"type":"codeVoice","code":"\"ToDoItemDetail\""},{"type":"text","text":" and add the codes into the file. This interface is for editing a todo item."}]}],"caption":[],"type":"step","runtimePreview":"todoDetail.png","media":null},{"code":"ToDoItemDetail1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Save the toDoItem to the DataStore and sync to the cloud when "},{"type":"codeVoice","code":"\"Done\""},{"type":"text","text":" is pressed."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoList.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a SwiftUI View file named "},{"type":"codeVoice","code":"\"ToDoList\""},{"type":"text","text":" and add the codes into the file. This interface displays the todo list including completed todo items."}]}],"caption":[],"type":"step","runtimePreview":"todolistNew.png","media":null},{"code":"ToDoList1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Save the toDoItem to the DataStore and sync to the cloud once its completion is updated."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoList2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Delete the toDoItem from the DataStore and sync to the cloud when it is wiped to delete."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoList3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Delete the completed toDoItem from the DataStore and sync to the cloud after a certain time."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoMainView0.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open "},{"type":"codeVoice","code":"\"ContentView.swift\""},{"type":"text","text":" and rename it "},{"type":"codeVoice","code":"\"ToDoMainView.swift\""},{"type":"text","text":"."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoMainView.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add the codes into the file. This interface is the main interface of the app."}]}],"caption":[],"type":"step","runtimePreview":"todoMain.png","media":null},{"code":"AmplifyConfig0.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open `“AmplifyConfig.swift”."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"AmplifyConfig1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Request all todoItem from DataStore when launching the app."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment18-1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open `“ToDoEnvironment.swift”."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null},{"code":"ToDoEnvironment19.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add update of "},{"type":"codeVoice","code":"\"showingDetail\""},{"type":"text","text":" in functions."}]}],"caption":[],"type":"step","runtimePreview":null,"media":null}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference","identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/ConnectCloud","overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Connect to the Cloud","abstract":[{"type":"text","text":"This tutorial guides you through connecting your local data to synchronize to a cloud backend."}]}],"identifier":{"url":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/UI","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Implement UI","categoryPathComponent":"Tutorial-Table-of-Contents","role":"project","category":"GettingStarted"},"hierarchy":{"modules":[{"reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/Tutorial-Table-of-Contents\/Set-Up-Fullstack-Project","projects":[{"reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/Prerequisites","sections":[{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/Prerequisites#Prerequisites"}]},{"reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/Set-up","sections":[{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/Set-up#Create-a-New-iOS-Application"},{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/Set-up#Add-Amplify-to-Your-Application"}]}]},{"reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/Tutorial-Table-of-Contents\/DataStore-Essentials","projects":[{"reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/GenerateModel","sections":[{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/GenerateModel#Generate-Model-Files"},{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/GenerateModel#Add-Extension-for-Generated-Model-Files"},{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/GenerateModel#Configure-Amplify-and-DataStore"}]},{"reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/DataManipulation","sections":[{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/DataManipulation#Generate-a-DataStore-Manipulation-File"},{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/DataManipulation#Implement-the-ToDoEnvironment-Class"},{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/DataManipulation#Create-a-Logger-File"},{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/DataManipulation#Create-a-ToDoItem"},{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/DataManipulation#Update-a-ToDoItem"},{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/DataManipulation#Request-ToDoItems"},{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/DataManipulation#Remove-ToDoItems"}]}]},{"reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/Tutorial-Table-of-Contents\/UI-Integration","projects":[{"reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/UI","sections":[{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/UI#Create-UI-Components"},{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/UI#Create-Interfaces"}]}]},{"reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/Tutorial-Table-of-Contents\/Cloud-Connection","projects":[{"reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/ConnectCloud","sections":[{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/ConnectCloud#Provision-Backend"},{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/ConnectCloud#Add-a-Subscription"},{"kind":"task","reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/ConnectCloud#Query-for-Mutations-Using-the-Console"}]}]}],"reference":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/Tutorial-Table-of-Contents","paths":[["doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/Tutorial-Table-of-Contents","doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/Tutorial-Table-of-Contents\/$volume","doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/Tutorial-Table-of-Contents\/UI-Integration"]]},"documentVersion":0,"references":{"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/Prerequisites":{"role":"project","title":"Prerequisites","estimatedTime":"5min","abstract":[{"type":"text","text":"This tutorial guides you through preparation for building an iOS App with Amplify."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/Prerequisites","kind":"project","type":"topic","url":"\/tutorials\/todosampleapptutorial\/prerequisites"},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/UI#Create-UI-Components":{"role":"pseudoSymbol","title":"Create UI Components","abstract":[{"type":"text","text":"This tutorial guides you through builidng the interface of ToDo app and interacting with DataStore."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/UI#Create-UI-Components","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/ui#Create-UI-Components"},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/GenerateModel#Generate-Model-Files":{"role":"pseudoSymbol","title":"Generate Model Files","abstract":[{"type":"text","text":"This tutorial guides you through generating model files and initializing Amplify."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/GenerateModel#Generate-Model-Files","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/generatemodel#Generate-Model-Files"},"ToDoMainView.swift":{"syntax":"swift","content":["import Amplify","import SwiftUI","","\/\/\/ Homepage. Control Add button and TodoList.","public struct ToDoMainView: View {","    @EnvironmentObject var environment: ToDoEnvironment","","    let logger: Logger","    ","    public init(logger: Logger = DefaultLogger()) {","        self.logger = logger","    }","","    public var body: some View {","        NavigationView {","            if environment.toDoItems.isEmpty {","                ToDoBlankView()","                    .navigationTitle(\"ToDo\")","                    .navigationBarTitleDisplayMode(.inline)","                    .toolbar {","                        ToolbarItem(placement: .navigationBarTrailing) {","                            Button(\"Add\") {","                                logger.info(\"Add new ToDo item\")","                                environment.selectedToDoItem = nil","                                environment.showingDetail = true","                            }","                        }","                    }","                    .edgesIgnoringSafeArea(.bottom)","                    .sheet(isPresented: $environment.showingDetail) {","                        ToDoItemDetail()","                    }","            }","            else {","                ToDoList()","                    .navigationTitle(\"ToDo\")","                    .navigationBarTitleDisplayMode(.inline)","                    .toolbar {","                        ToolbarItem(placement: .navigationBarTrailing) {","                            Button(\"Add\") {","                                logger.info(\"Add new ToDo item\")","                                environment.selectedToDoItem = nil","                                environment.showingDetail = true","                            }","                        }","                    }","                    .edgesIgnoringSafeArea(.bottom)","            }","        }","    }","}","","struct ToDoMainView_Previews: PreviewProvider {","    static var previews: some View {","        let env = ToDoEnvironment()","        env.saveToDoItem(toDoItem: ToDoItem(text: \"Eat breakfast\"))","        return ToDoMainView().environmentObject(env)","    }","}"],"fileName":"ToDoMainView.swift","identifier":"ToDoMainView.swift","type":"file","fileType":"swift","highlights":[{"line":6},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":55},{"line":56},{"line":57}]},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/GenerateModel#Add-Extension-for-Generated-Model-Files":{"role":"pseudoSymbol","title":"Add Extension for Generated Model Files","abstract":[{"type":"text","text":"This tutorial guides you through generating model files and initializing Amplify."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/GenerateModel#Add-Extension-for-Generated-Model-Files","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/generatemodel#Add-Extension-for-Generated-Model-Files"},"picker.png":{"alt":"priority picker","type":"image","identifier":"picker.png","variants":[{"url":"\/images\/picker.png","size":{"width":1167,"height":211},"traits":["1x","light"]}]},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/DataManipulation":{"role":"project","title":"Data Manipulation","estimatedTime":"15min","abstract":[{"type":"text","text":"This tutorial guides you through creating, updating, querying, and deleting ToDoitem with DataStore."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/DataManipulation","kind":"project","type":"topic","url":"\/tutorials\/todosampleapptutorial\/datamanipulation"},"todolistNew.png":{"alt":"todo list preview","type":"image","identifier":"todolistNew.png","variants":[{"url":"\/images\/todolistNew.png","size":{"width":1166,"height":2259},"traits":["1x","light"]}]},"doc://Amazon.ToDoSampleAppTutorial/tutorials/Tutorial-Table-of-Contents/DataStore-Essentials":{"role":"article","title":"DataStore Essentials","abstract":[],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/Tutorial-Table-of-Contents\/DataStore-Essentials","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/datastore-essentials"},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/UI#Create-Interfaces":{"role":"pseudoSymbol","title":"Create Interfaces","abstract":[{"type":"text","text":"This tutorial guides you through builidng the interface of ToDo app and interacting with DataStore."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/UI#Create-Interfaces","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/ui#Create-Interfaces"},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/ConnectCloud":{"role":"project","title":"Connect to the Cloud","estimatedTime":"10min","abstract":[{"type":"text","text":"This tutorial guides you through connecting your local data to synchronize to a cloud backend."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/ConnectCloud","kind":"project","type":"topic","url":"\/tutorials\/todosampleapptutorial\/connectcloud"},"doc://Amazon.ToDoSampleAppTutorial/tutorials/Tutorial-Table-of-Contents/Set-Up-Fullstack-Project":{"role":"article","title":"Set Up Fullstack Project","abstract":[],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/Tutorial-Table-of-Contents\/Set-Up-Fullstack-Project","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/set-up-fullstack-project"},"todoRow.png":{"alt":"todoRow preview","type":"image","identifier":"todoRow.png","variants":[{"url":"\/images\/todoRow.png","size":{"width":1546,"height":898},"traits":["1x","light"]}]},"todoDetail.png":{"alt":"todo detail view","type":"image","identifier":"todoDetail.png","variants":[{"url":"\/images\/todoDetail.png","size":{"width":1170,"height":2532},"traits":["1x","light"]}]},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/Set-up":{"role":"project","title":"Set Up Your Application","estimatedTime":"5min","abstract":[{"type":"text","text":"This tutorial guides you through setting up an iOS application configured with Amplify."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/Set-up","kind":"project","type":"topic","url":"\/tutorials\/todosampleapptutorial\/set-up"},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/DataManipulation#Create-a-Logger-File":{"role":"pseudoSymbol","title":"Create a Logger File","abstract":[{"type":"text","text":"This tutorial guides you through creating, updating, querying, and deleting ToDoitem with DataStore."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/DataManipulation#Create-a-Logger-File","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/datamanipulation#Create-a-Logger-File"},"ToDoCheckboxFill.swift":{"syntax":"swift","content":["import SwiftUI","","struct ToDoCheckboxFill: View {","    @Binding var item: ToDoItem","    ","    var body: some View {","        switch item.priority {","        case .low:","            Image(systemName: \"checkmark.square.fill\")","                .resizable()","                .foregroundColor(Color.blue)","                .frame(width: 24, height: 24)","        case .medium:","            Image(systemName: \"checkmark.square.fill\")","                .resizable()","                .foregroundColor(Color.orange)","                .frame(width: 24, height: 24)","        case .high:","            Image(systemName: \"checkmark.square.fill\")","                .resizable()","                .foregroundColor(Color.red)","                .frame(width: 24, height: 24)","        }","    }","}","","struct ToDoCheckboxFill_Previews: PreviewProvider {","    static var previews: some View {","        let item = ToDoItem(text: \"Eat breakfast\")","        ToDoCheckbox(item: .constant(item))","    }","}"],"fileName":"ToDoCheckboxFill.swift","identifier":"ToDoCheckboxFill.swift","type":"file","fileType":"swift","highlights":[]},"ToDoItemDetail.swift":{"syntax":"swift","content":["import SwiftUI","","\/\/\/ Display the detail of a todo item.","public struct ToDoItemDetail: View {","    @EnvironmentObject var environment: ToDoEnvironment","","    @State var id: String? = nil","    @State var priority: ToDoPriority = .medium","    @State var text: String = \"\"","    ","    @State var priorityBefore: ToDoPriority = .medium","    @State var textBefore: String = \"\"","    @State var isCancel: Bool = false","    ","    let logger: Logger","","    public init(logger: Logger = DefaultLogger()) {","        self.logger = logger","    }","    ","    \/\/\/Control Save button","    var saveDisabled: Bool {","        text.isEmpty","    }","    ","    \/\/\/ Todo item detail view. Control add or update a Todo item.","    public var body: some View {","        NavigationView {","            VStack {","                \/\/\/Use ToDoItemPriorityPicker to display\/edit priority.","                ToDoItemPriorityPicker(priority: $priority)","                \/\/\/Display\/edit task.","                TextField(\"Write your new ToDo here!\", text: $text)","                    .textFieldStyle(RoundedBorderTextFieldStyle())","                    .frame(height: 50.0)","                Spacer()","                .navigationTitle(\"ToDo Item\")","                .navigationBarTitleDisplayMode(.inline)","            }","            .toolbar {","                ToolbarItem(placement: .navigationBarLeading) {","                    Button(\"Cancel\") {","                        \/\/\/Values are binding. When cancel, selectedToDoItem should be nil. If something changes, call alert.","                        if priority != priorityBefore || text != textBefore {","                            isCancel = true","                        }","                        else {","                            environment.selectedToDoItem = nil","                            environment.showingDetail = false","                        }","                    }","                }","                ToolbarItem(placement: .navigationBarTrailing) {","                    \/\/\/Use ToDoEnvironment to update\/add to the list.","                    Button(action: {","                        let item = ToDoItem(id: id, priority: priority, text: text)","                        logger.info(\"Saving Item: \\(item)\")","                    }, label: {","                        Text(\"Done\")","                    })","                    .disabled(saveDisabled)","                }","            }","        }","        .alert(isPresented: $isCancel, content: {","                        return Alert(title: Text(\"Discard Changes\"), message: Text(\"Are you sure you want to discard the changes made?\"), primaryButton: .default(Text(\"Yes\"), action: {","                            environment.selectedToDoItem = nil","                            environment.showingDetail = false","                        }), secondaryButton: .destructive(Text(\"No\")))","                        })","        \/\/\/Get selected Todo item information which is the current Todo item.","        .onAppear {","            if let item = environment.selectedToDoItem {","                logger.info(\"Loading Item: \\(item)\")","                id = item.id","                priority = item.priority","                text = item.text","                priorityBefore = priority","                textBefore = text","            }","        }","    }","}","","struct ToDoItemDetail_Previews: PreviewProvider {","    static var previews: some View {","        ToDoItemDetail().environmentObject(ToDoEnvironment())","    }","}"],"fileName":"ToDoItemDetail.swift","identifier":"ToDoItemDetail.swift","type":"file","fileType":"swift","highlights":[]},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/DataManipulation#Request-ToDoItems":{"role":"pseudoSymbol","title":"Request ToDoItems","abstract":[{"type":"text","text":"This tutorial guides you through creating, updating, querying, and deleting ToDoitem with DataStore."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/DataManipulation#Request-ToDoItems","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/datamanipulation#Request-ToDoItems"},"AmplifyConfig0.swift":{"syntax":"swift","content":["\/\/","\/\/  Main file including Amplify configuration","\/\/  AmplifyConfigTemplate","\/\/","\/\/  Created by AWS Amplify.","\/\/","import Amplify","import AWSDataStorePlugin","import AWSAPIPlugin","import SwiftUI","","@main","struct ToDo: App {","    public init() {","           configureAmplify()","       }","    ","    var body: some Scene {","        WindowGroup {","","        }","    }","}","","\/\/\/Configure Amplify","func configureAmplify() {","    let models = AmplifyModels()","\/\/    let apiPlugin = AWSAPIPlugin(modelRegistration: models)","    let dataStorePlugin = AWSDataStorePlugin(modelRegistration: models)","    do {","\/\/        try Amplify.add(plugin: apiPlugin)","        try Amplify.add(plugin: dataStorePlugin)","        try Amplify.configure()","        print(\"Initialized Amplify\");","    } catch {","        assert(false, \"Could not initialize Amplify: \\(error)\")","    }","}"],"fileName":"AmplifyConfig.swift","identifier":"AmplifyConfig0.swift","type":"file","fileType":"swift","highlights":[]},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/DataManipulation#Generate-a-DataStore-Manipulation-File":{"role":"pseudoSymbol","title":"Generate a DataStore Manipulation File","abstract":[{"type":"text","text":"This tutorial guides you through creating, updating, querying, and deleting ToDoitem with DataStore."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/DataManipulation#Generate-a-DataStore-Manipulation-File","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/datamanipulation#Generate-a-DataStore-Manipulation-File"},"blankView.png":{"alt":"blank view","type":"image","identifier":"blankView.png","variants":[{"url":"\/images\/blankView.png","size":{"width":1170,"height":2532},"traits":["1x","light"]}]},"ToDoItemDetail1.swift":{"syntax":"swift","content":["import SwiftUI","","\/\/\/ Display the detail of a todo item.","public struct ToDoItemDetail: View {","    @EnvironmentObject var environment: ToDoEnvironment","","    @State var id: String? = nil","    @State var priority: ToDoPriority = .medium","    @State var text: String = \"\"","    ","    @State var priorityBefore: ToDoPriority = .medium","    @State var textBefore: String = \"\"","    @State var isCancel: Bool = false","    ","    let logger: Logger","","    public init(logger: Logger = DefaultLogger()) {","        self.logger = logger","    }","    ","    \/\/\/Control Save button","    var saveDisabled: Bool {","        text.isEmpty","    }","    ","    \/\/\/ Todo item detail view. Control add or update a Todo item.","    public var body: some View {","        NavigationView {","            VStack {","                \/\/\/Use ToDoItemPriorityPicker to display\/edit priority.","                ToDoItemPriorityPicker(priority: $priority)","                \/\/\/Display\/edit task.","                TextField(\"Write your new ToDo here!\", text: $text)","                    .textFieldStyle(RoundedBorderTextFieldStyle())","                    .frame(height: 50.0)","                Spacer()","                .navigationTitle(\"ToDo Item\")","                .navigationBarTitleDisplayMode(.inline)","            }","            .toolbar {","                ToolbarItem(placement: .navigationBarLeading) {","                    Button(\"Cancel\") {","                        \/\/\/Values are binding. When cancel, selectedToDoItem should be nil. If something changes, call alert.","                        if priority != priorityBefore || text != textBefore {","                            isCancel = true","                        }","                        else {","                            environment.selectedToDoItem = nil","                            environment.showingDetail = false","                        }","                    }","                }","                ToolbarItem(placement: .navigationBarTrailing) {","                    \/\/\/Use ToDoEnvironment to update\/add to the list.","                    Button(action: {","                        let item = ToDoItem(id: id, priority: priority, text: text)","                        logger.info(\"Saving Item: \\(item)\")","                        environment.saveToDoItem(toDoItem: item)","                    }, label: {","                        Text(\"Done\")","                    })","                    .disabled(saveDisabled)","                }","            }","        }","        .alert(isPresented: $isCancel, content: {","                        return Alert(title: Text(\"Discard Changes\"), message: Text(\"Are you sure you want to discard the changes made?\"), primaryButton: .default(Text(\"Yes\"), action: {","                            environment.selectedToDoItem = nil","                            environment.showingDetail = false","                        }), secondaryButton: .destructive(Text(\"No\")))","                        })","        \/\/\/Get selected Todo item information which is the current Todo item.","        .onAppear {","            if let item = environment.selectedToDoItem {","                logger.info(\"Loading Item: \\(item)\")","                id = item.id","                priority = item.priority","                text = item.text","                priorityBefore = priority","                textBefore = text","            }","        }","    }","}","","struct ToDoItemDetail_Previews: PreviewProvider {","    static var previews: some View {","        ToDoItemDetail().environmentObject(ToDoEnvironment())","    }","}"],"fileName":"ToDoItemDetail.swift","identifier":"ToDoItemDetail1.swift","type":"file","fileType":"swift","highlights":[{"line":58}]},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/DataManipulation#Update-a-ToDoItem":{"role":"pseudoSymbol","title":"Update a ToDoItem","abstract":[{"type":"text","text":"This tutorial guides you through creating, updating, querying, and deleting ToDoitem with DataStore."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/DataManipulation#Update-a-ToDoItem","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/datamanipulation#Update-a-ToDoItem"},"ToDoItemPriorityPicker.swift":{"syntax":"swift","content":["import SwiftUI","","public struct ToDoItemPriorityPicker: View {","    @Binding var priority: ToDoPriority","","    public var body: some View {","        VStack {","            Text(\"Priority of this ToDo Item?\")","                .font(.subheadline)","                .padding(.top, 5.0)","                .foregroundColor(\/*@START_MENU_TOKEN@*\/Color(hue: 1.0, saturation: 0.044, brightness: 0.815)\/*@END_MENU_TOKEN@*\/)","            Picker(\"Priority\", selection: $priority) {","                Text(String(describing: ToDoPriority.low))","                    .tag(ToDoPriority.low)","                Text(String(describing: ToDoPriority.medium))","                    .tag(ToDoPriority.medium)","                Text(String(describing: ToDoPriority.high))","                    .tag(ToDoPriority.high)","            }","            .frame(height: 20.0)","                .pickerStyle(SegmentedPickerStyle())","            .padding(.horizontal)","        }","    }","}","","struct ToDoItemPriorityPicker_Previews: PreviewProvider {","    static var previews: some View {","        ToDoItemPriorityPicker(priority: .constant(.medium))","    }","}"],"fileName":"ToDoItemPriorityPicker.swift","identifier":"ToDoItemPriorityPicker.swift","type":"file","fileType":"swift","highlights":[]},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/Set-up#Add-Amplify-to-Your-Application":{"role":"pseudoSymbol","title":"Add Amplify to Your Application","abstract":[{"type":"text","text":"This tutorial guides you through setting up an iOS application configured with Amplify."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/Set-up#Add-Amplify-to-Your-Application","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/set-up#Add-Amplify-to-Your-Application"},"checkboxFill.png":{"alt":"checkboxFill preview","type":"image","identifier":"checkboxFill.png","variants":[{"url":"\/images\/checkboxFill.png","size":{"width":153,"height":458},"traits":["1x","light"]}]},"todoMain.png":{"alt":"todo main view preview","type":"image","identifier":"todoMain.png","variants":[{"url":"\/images\/todoMain.png","size":{"width":1170,"height":2532},"traits":["1x","light"]}]},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/DataManipulation#Implement-the-ToDoEnvironment-Class":{"role":"pseudoSymbol","title":"Implement the ToDoEnvironment Class","abstract":[{"type":"text","text":"This tutorial guides you through creating, updating, querying, and deleting ToDoitem with DataStore."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/DataManipulation#Implement-the-ToDoEnvironment-Class","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/datamanipulation#Implement-the-ToDoEnvironment-Class"},"ToDoList2.swift":{"syntax":"swift","content":["import SwiftUI","import Amplify","","\/\/\/ Display Todo list. Control TodoListRow and ToDoItemDetail. Delete TodoItem.","public struct ToDoList: View {","    @EnvironmentObject var environment: ToDoEnvironment","","    @State var showingDetail: Bool = false","    ","    private var showTime = -3.0","","    let logger: Logger","","    public init(logger: Logger = DefaultLogger()) {","        self.logger = logger","    }","    ","    public var body: some View {","        \/\/\/Display Todo list. Loop can be used in List to display whole elements.","        List {","            ForEach(environment.toDoItems.indices, id: \\.self) { index in","                \/\/\/Click one Todo item, showingDetail to be true, call .sheet to show TodoItemDetail. selectedToDoItem store current Todo item.","                if (environment.toDoItems[index].completedAt == nil) {","                    HStack {","                        Button(action: {","                            logger.info(\"Text in List: \\(environment.toDoItems[index])\")","                            environment.selectedToDoItem = environment.toDoItems[index]","                            environment.showingDetail = true","                        }, label: {","                            \/\/\/Transfer toDoItem to ToDoListRow to display. toDoItem should add $ to keep binding to TodoListRow.","                            ToDoListRow(toDoItem: $environment.toDoItems[index])","                        })","                        .buttonStyle(BorderlessButtonStyle())","                        Spacer()","                        Button(action: {","                            environment.toDoItems[index].completedAt = Temporal.DateTime.now()","                            environment.saveToDoItem(toDoItem: environment.toDoItems[index])","                        }, label: {","                            ToDoCheckbox(item: $environment.toDoItems[index])","                        })","                        .frame(width: 60, height: 50)","                    }","                    .listRowBackground(Color.white)","                }","            }","            \/\/\/delete selected Todo item.","            .onDelete(perform: { indexSet in","                environment.remove(at: indexSet)","            })","            \/\/\/Dispay completed ToDo items","            Section(header: Text(\"Completed items\")) {","                ForEach(environment.toDoItems.indices, id: \\.self) { index in","                    if (environment.toDoItems[index].completedAt != nil) {","                        HStack{","                            ToDoListRow(toDoItem: $environment.toDoItems[index])","                            Spacer()","                            Button(action: {","                                environment.toDoItems[index].completedAt = nil","                                environment.saveToDoItem(toDoItem: environment.toDoItems[index])","                            }, label: {","                                ToDoCheckboxFill(item: $environment.toDoItems[index])","                            })","                            .frame(width: 60, height: 50)","                        }","                        .animation(.spring())","                    }","                }","            }","        }","        \/\/\/Show ToDoItemDetail view.","        .sheet(isPresented: $environment.showingDetail) {","            ToDoItemDetail()","        }","    }","","}","","struct ToDoList_Previews: PreviewProvider {","    static var previews: some View {","        let env = ToDoEnvironment()","        env.saveToDoItem(toDoItem: ToDoItem(text: \"Eat breakfast\"))","        return ToDoList().environmentObject(env)","    }","}"],"fileName":"ToDoList.swift","identifier":"ToDoList2.swift","type":"file","fileType":"swift","highlights":[{"line":46},{"line":47},{"line":48},{"line":49}]},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/Prerequisites#Prerequisites":{"role":"pseudoSymbol","title":"Prerequisites","abstract":[{"type":"text","text":"This tutorial guides you through preparation for building an iOS App with Amplify."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/Prerequisites#Prerequisites","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/prerequisites#Prerequisites"},"ToDoList1.swift":{"syntax":"swift","content":["import SwiftUI","import Amplify","","\/\/\/ Display Todo list. Control TodoListRow and ToDoItemDetail. Delete TodoItem.","public struct ToDoList: View {","    @EnvironmentObject var environment: ToDoEnvironment","","    @State var showingDetail: Bool = false","    ","    private var showTime = -3.0","","    let logger: Logger","","    public init(logger: Logger = DefaultLogger()) {","        self.logger = logger","    }","    ","    public var body: some View {","        \/\/\/Display Todo list. Loop can be used in List to display whole elements.","        List {","            ForEach(environment.toDoItems.indices, id: \\.self) { index in","                \/\/\/Click one Todo item, showingDetail to be true, call .sheet to show TodoItemDetail. selectedToDoItem store current Todo item.","                if (environment.toDoItems[index].completedAt == nil) {","                    HStack {","                        Button(action: {","                            logger.info(\"Text in List: \\(environment.toDoItems[index])\")","                            environment.selectedToDoItem = environment.toDoItems[index]","                            environment.showingDetail = true","                        }, label: {","                            \/\/\/Transfer toDoItem to ToDoListRow to display. toDoItem should add $ to keep binding to TodoListRow.","                            ToDoListRow(toDoItem: $environment.toDoItems[index])","                        })","                        .buttonStyle(BorderlessButtonStyle())","                        Spacer()","                        Button(action: {","                            environment.toDoItems[index].completedAt = Temporal.DateTime.now()","                            environment.saveToDoItem(toDoItem: environment.toDoItems[index])","                        }, label: {","                            ToDoCheckbox(item: $environment.toDoItems[index])","                        })","                        .frame(width: 60, height: 50)","                    }","                    .listRowBackground(Color.white)","                }","            }","","            \/\/\/Dispay completed ToDo items","            Section(header: Text(\"Completed items\")) {","                ForEach(environment.toDoItems.indices, id: \\.self) { index in","                    if (environment.toDoItems[index].completedAt != nil) {","                        HStack{","                            ToDoListRow(toDoItem: $environment.toDoItems[index])","                            Spacer()","                            Button(action: {","                                environment.toDoItems[index].completedAt = nil","                                environment.saveToDoItem(toDoItem: environment.toDoItems[index])","                            }, label: {","                                ToDoCheckboxFill(item: $environment.toDoItems[index])","                            })","                            .frame(width: 60, height: 50)","                        }","                        .animation(.spring())","                    }","                }","            }","        }","        \/\/\/Show ToDoItemDetail view.","        .sheet(isPresented: $environment.showingDetail) {","            ToDoItemDetail()","        }","    }","","}","","struct ToDoList_Previews: PreviewProvider {","    static var previews: some View {","        let env = ToDoEnvironment()","        env.saveToDoItem(toDoItem: ToDoItem(text: \"Eat breakfast\"))","        return ToDoList().environmentObject(env)","    }","}"],"fileName":"ToDoList.swift","identifier":"ToDoList1.swift","type":"file","fileType":"swift","highlights":[{"line":37},{"line":56}]},"ToDoListRow.swift":{"syntax":"swift","content":["import SwiftUI","","\/\/\/ Display a row in the Todo list.","public struct ToDoListRow: View {","    \/\/\/Binding one TodoItem in the list.","    @Binding var toDoItem: ToDoItem","","    public var body: some View {","        HStack{","            switch toDoItem.priority {","            case .low:","                VStack{","                    Rectangle().frame(width: 8.0).foregroundColor(.blue)","                }","                Spacer().frame(width: 5)","                HStack {","                    Image(systemName: \"l.circle\").resizable()","                        .foregroundColor(.blue)","                        .frame(width: 24.0, height: 24.0)","                    Text(toDoItem.text).strikethrough((toDoItem.completedAt != nil)).foregroundColor((toDoItem.completedAt != nil) ? Color(.systemGray2) : .black)","                }","            case .medium:","                VStack{","                    Rectangle().frame(width: 8.0).foregroundColor(.orange)","                }","                Spacer().frame(width: 5)","                HStack {","                    Image(systemName: \"m.circle\").resizable()","                        .foregroundColor(.orange)","                        .frame(width: 24.0, height: 24.0)","                    Text(toDoItem.text).strikethrough((toDoItem.completedAt != nil)).foregroundColor((toDoItem.completedAt != nil) ? Color(.systemGray2) : .black)","                }","            case .high:","                VStack{","                    Rectangle().frame(width: 8.0).foregroundColor(.red)","                }","                Spacer().frame(width: 5)","                HStack {","                    Image(systemName: \"h.circle\").resizable()","                        .foregroundColor(.red)","                        .frame(width: 24.0, height: 24.0)","                    Text(toDoItem.text).strikethrough((toDoItem.completedAt != nil)).foregroundColor((toDoItem.completedAt != nil) ? Color(.systemGray2) : .black)","                }","            }","        }","        .animation(.spring(response: 2))","    }","}","","struct ToDoListRow_Previews: PreviewProvider {","    static var previews: some View {","        let item = ToDoItem(text: \"Eat breakfast\")","        ToDoListRow(toDoItem: .constant(item))","    }","}"],"fileName":"ToDoListRow.swift","identifier":"ToDoListRow.swift","type":"file","fileType":"swift","highlights":[]},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/GenerateModel":{"role":"project","title":"Configuration","estimatedTime":"10min","abstract":[{"type":"text","text":"This tutorial guides you through generating model files and initializing Amplify."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/GenerateModel","kind":"project","type":"topic","url":"\/tutorials\/todosampleapptutorial\/generatemodel"},"ToDoList3.swift":{"syntax":"swift","content":["import SwiftUI","import Amplify","","\/\/\/ Display Todo list. Control TodoListRow and ToDoItemDetail. Delete TodoItem.","public struct ToDoList: View {","    @EnvironmentObject var environment: ToDoEnvironment","","    @State var showingDetail: Bool = false","    ","    private var showTime = -3.0","","    let logger: Logger","","    public init(logger: Logger = DefaultLogger()) {","        self.logger = logger","    }","    ","    public var body: some View {","        \/\/\/Display Todo list. Loop can be used in List to display whole elements.","        List {","            ForEach(environment.toDoItems.indices, id: \\.self) { index in","                \/\/\/Click one Todo item, showingDetail to be true, call .sheet to show TodoItemDetail. selectedToDoItem store current Todo item.","                if (environment.toDoItems[index].completedAt == nil) {","                    HStack {","                        Button(action: {","                            logger.info(\"Text in List: \\(environment.toDoItems[index])\")","                            environment.selectedToDoItem = environment.toDoItems[index]","                            environment.showingDetail = true","                        }, label: {","                            \/\/\/Transfer toDoItem to ToDoListRow to display. toDoItem should add $ to keep binding to TodoListRow.","                            ToDoListRow(toDoItem: $environment.toDoItems[index])","                        })","                        .buttonStyle(BorderlessButtonStyle())","                        Spacer()","                        Button(action: {","                            environment.toDoItems[index].completedAt = Temporal.DateTime.now()","                            environment.saveToDoItem(toDoItem: environment.toDoItems[index])","                            environment.disappearCompletedItems(showTime: showTime)","                        }, label: {","                            ToDoCheckbox(item: $environment.toDoItems[index])","                        })","                        .frame(width: 60, height: 50)","                    }","                    .listRowBackground(Color.white)","                }","            }","            \/\/\/delete selected Todo item.","            .onDelete(perform: { indexSet in","                environment.remove(at: indexSet)","            })","            \/\/\/Dispay completed ToDo items","            Section(header: Text(\"Completed items\")) {","                ForEach(environment.toDoItems.indices, id: \\.self) { index in","                    if (environment.toDoItems[index].completedAt != nil) {","                        HStack{","                            ToDoListRow(toDoItem: $environment.toDoItems[index])","                            Spacer()","                            Button(action: {","                                environment.toDoItems[index].completedAt = nil","                                environment.saveToDoItem(toDoItem: environment.toDoItems[index])","                            }, label: {","                                ToDoCheckboxFill(item: $environment.toDoItems[index])","                            })","                            .frame(width: 60, height: 50)","                        }","                        .animation(.spring())","                        .onAppear() {","                            environment.disappearCompletedItems(showTime: showTime)","                        }","                    }","                }","            }","        }","        \/\/\/Show ToDoItemDetail view.","        .sheet(isPresented: $environment.showingDetail) {","            ToDoItemDetail()","        }","    }","","}","","struct ToDoList_Previews: PreviewProvider {","    static var previews: some View {","        let env = ToDoEnvironment()","        env.saveToDoItem(toDoItem: ToDoItem(text: \"Eat breakfast\"))","        return ToDoList().environmentObject(env)","    }","}"],"fileName":"ToDoList.swift","identifier":"ToDoList3.swift","type":"file","fileType":"swift","highlights":[{"line":38},{"line":67},{"line":68},{"line":69}]},"ToDoEnvironment19.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    let logger: Logger","","    public init(logger: Logger = DefaultLogger()) {","        self.logger = logger","    }","    ","    public func remove(toDoItem: ToDoItem) {","        if let index = toDoItems.firstIndex(of: toDoItem) {","            toDoItems.remove(at: index)","            logger.info(\"Removed item!\")","            logItems()","            showingDetail = false","            delete(item: toDoItem)","        }","    }","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        let index = toDoItems.firstIndex {","            $0.id == toDoItem.id","        }","        ","        if let index = index {","            logger.info(\"Updating Item: \\(toDoItem)\")","            toDoItems[index] = toDoItem","            create(item: toDoItem)","        } else {","            logger.info(\"Adding Item: \\(toDoItem)\")","            toDoItems.append(toDoItem)","            create(item: toDoItem)","        }","        ","        \/\/\/Sort as H M L","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                return $1.priority == ToDoPriority.low","            case ToDoPriority.high:","                return true","            }","        })","        ","        logger.info(\"Saved item!\")","        logItems()","        showingDetail = false","    }","    ","    public func disappearCompletedItems(showTime: Double) {","        for item in toDoItems {","            if let completedTime = item.completedAt {","                if (completedTime.foundationDate.timeIntervalSinceNow <= showTime) {","                    remove(toDoItem: item)","                }","            }","        }","    }","    ","    public func remove(at indexSet: IndexSet) {","        for index in indexSet {","            let toDoItem = toDoItems[index]","            delete(item: toDoItem)","        }","        ","        toDoItems.remove(atOffsets: indexSet)","        logItems()","    }","    ","    \/\/\/Query all todo items in DataStore and put them into todoItems","    public func initTodo() {","        let todos = queryAll(type: ToDoItem())","        for todo in todos {","            toDoItems.append(todo)","        }","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                return $1.priority == ToDoPriority.low","            case ToDoPriority.high:","                return true","            }","        })","    }","    ","","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { [weak logger] result in","            switch(result) {","            case .success(let savedItem):","                logger?.debug(\"Saved item: \\(savedItem.self)\")","            case .failure(let error):","                logger?.debug(\"Could not save item to DataStore: \\(error)\")","            }","        }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    logger.error(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                logger.error(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","            switch(result) {","            case .success(let todos):","                items = todos","            case .failure(let error):","                logger.error(\"Could not query DataStore: \\(error)\")","            }","        }","        return items","    }","    ","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { [weak logger] result in","            switch(result) {","            case .success:","                logger?.debug(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                logger?.debug(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment19.swift","type":"file","fileType":"swift","highlights":[{"line":24},{"line":60}]},"ToDoCheckbox.swift":{"syntax":"swift","content":["import SwiftUI","","struct ToDoCheckbox: View {","    @Binding var item: ToDoItem","    ","    var body: some View {","        switch item.priority {","        case .low:","            Image(systemName: \"square\")","                .resizable()","                .foregroundColor(Color.blue)","                .frame(width: 24, height: 24)","        case .medium:","            Image(systemName: \"square\")","                .resizable()","                .foregroundColor(Color.orange)","                .frame(width: 24, height: 24)","        case .high:","            Image(systemName: \"square\")","                .resizable()","                .foregroundColor(Color.red)","                .frame(width: 24, height: 24)","        }","    }","}","","struct ToDoCheckbox_Previews: PreviewProvider {","    static var previews: some View {","        let item = ToDoItem(text: \"Eat breakfast\")","        ToDoCheckbox(item: .constant(item))","    }","}"],"fileName":"ToDoCheckbox.swift","identifier":"ToDoCheckbox.swift","type":"file","fileType":"swift","highlights":[]},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/Set-up#Create-a-New-iOS-Application":{"role":"pseudoSymbol","title":"Create a New iOS Application","abstract":[{"type":"text","text":"This tutorial guides you through setting up an iOS application configured with Amplify."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/Set-up#Create-a-New-iOS-Application","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/set-up#Create-a-New-iOS-Application"},"doc://Amazon.ToDoSampleAppTutorial/tutorials/Tutorial-Table-of-Contents/Cloud-Connection":{"role":"article","title":"Cloud Connection","abstract":[],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/Tutorial-Table-of-Contents\/Cloud-Connection","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/cloud-connection"},"doc://Amazon.ToDoSampleAppTutorial/tutorials/Tutorial-Table-of-Contents":{"role":"overview","title":"Meet Amplify!","abstract":[{"type":"text","text":"In this tutorial, you will:"}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/Tutorial-Table-of-Contents","kind":"overview","type":"topic","url":"\/tutorials\/tutorial-table-of-contents"},"doc://Amazon.ToDoSampleAppTutorial/tutorials/Tutorial-Table-of-Contents/UI-Integration":{"role":"article","title":"UI Integration","abstract":[],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/Tutorial-Table-of-Contents\/UI-Integration","kind":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/ui-integration"},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/ConnectCloud#Add-a-Subscription":{"role":"pseudoSymbol","title":"Add a Subscription","abstract":[{"type":"text","text":"This tutorial guides you through connecting your local data to synchronize to a cloud backend."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/ConnectCloud#Add-a-Subscription","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/connectcloud#Add-a-Subscription"},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/ConnectCloud#Provision-Backend":{"role":"pseudoSymbol","title":"Provision Backend","abstract":[{"type":"text","text":"This tutorial guides you through connecting your local data to synchronize to a cloud backend."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/ConnectCloud#Provision-Backend","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/connectcloud#Provision-Backend"},"ToDoBlankView.swift":{"syntax":"swift","content":["import SwiftUI","","struct ToDoBlankView: View {","    var body: some View {","        VStack {","            Text(\"No ToDo Items\")","                .font(.title)","                .foregroundColor(Color.gray)","            Text(\"Use Add in the upper right corner to create Todo Items!\")","                .foregroundColor(Color.gray)","                .multilineTextAlignment(.center)","                .padding(\/*@START_MENU_TOKEN@*\/.all\/*@END_MENU_TOKEN@*\/)","        }","    }","}","","struct ToDoBlankView_Previews: PreviewProvider {","    static var previews: some View {","        ToDoBlankView()","    }","}"],"fileName":"ToDoBlankView.swift","identifier":"ToDoBlankView.swift","type":"file","fileType":"swift","highlights":[]},"checkbox.png":{"alt":"checkbox preview","type":"image","identifier":"checkbox.png","variants":[{"url":"\/images\/checkbox.png","size":{"width":149,"height":461},"traits":["1x","light"]}]},"AmplifyConfig1.swift":{"syntax":"swift","content":["\/\/","\/\/  Main file including Amplify configuration","\/\/  AmplifyConfigTemplate","\/\/","\/\/  Created by AWS Amplify.","\/\/","import Amplify","import AWSDataStorePlugin","import AWSAPIPlugin","import SwiftUI","","@main","struct ToDo: App {","    let logger: Logger","    ","    public init() {","        self.logger = DefaultLogger()","        configureAmplify()","    }","    ","    var body: some Scene {","        WindowGroup {","            ToDoMainView().environmentObject(createEnvironment())","        }","    }","","    private func createEnvironment() -> ToDoEnvironment {","        let env = ToDoEnvironment()","        env.initTodo()","        return env","    }","","    \/\/\/Configure Amplify","    func configureAmplify() {","        let models = AmplifyModels()","\/\/        let apiPlugin = AWSAPIPlugin(modelRegistration: models)","        let dataStorePlugin = AWSDataStorePlugin(modelRegistration: models)","        do {","\/\/            try Amplify.add(plugin: apiPlugin)","            try Amplify.add(plugin: dataStorePlugin)","            try Amplify.configure()","            logger.info(\"Initialized Amplify\");","        } catch {","            assert(false, \"Could not initialize Amplify: \\(error)\")","        }","    }","","}"],"fileName":"AmplifyConfig.swift","identifier":"AmplifyConfig1.swift","type":"file","fileType":"swift","highlights":[{"line":14},{"line":15},{"line":17},{"line":18},{"line":19},{"line":23},{"line":27},{"line":28},{"line":29},{"line":30},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47}]},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/ConnectCloud#Query-for-Mutations-Using-the-Console":{"role":"pseudoSymbol","title":"Query for Mutations Using the Console","abstract":[{"type":"text","text":"This tutorial guides you through connecting your local data to synchronize to a cloud backend."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/ConnectCloud#Query-for-Mutations-Using-the-Console","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/connectcloud#Query-for-Mutations-Using-the-Console"},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/DataManipulation#Remove-ToDoItems":{"role":"pseudoSymbol","title":"Remove ToDoItems","abstract":[{"type":"text","text":"This tutorial guides you through creating, updating, querying, and deleting ToDoitem with DataStore."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/DataManipulation#Remove-ToDoItems","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/datamanipulation#Remove-ToDoItems"},"ToDoEnvironment18-1.swift":{"syntax":"swift","content":["import Amplify","import Foundation","","\/\/\/ Maintain all Todo information used in each view.","public class ToDoEnvironment: ObservableObject {","    \/\/\/Control ToDoItemDetail show or not. Used in ToDoList and ToDoItemDetail.","    @Published var showingDetail: Bool = false","    \/\/\/Store ToDoItems","    @Published var toDoItems: ToDoItems = []","    \/\/\/Store current Todo item information. Display in ToDoItemDetail.","    @Published var selectedToDoItem: ToDoItem? = nil","","    let logger: Logger","","    public init(logger: Logger = DefaultLogger()) {","        self.logger = logger","    }","    ","    public func remove(toDoItem: ToDoItem) {","        if let index = toDoItems.firstIndex(of: toDoItem) {","            toDoItems.remove(at: index)","            logger.info(\"Removed item!\")","            logItems()","            delete(item: toDoItem)","        }","    }","    ","    \/\/\/ Check id to know whether the item is in the todoItems, then determine update or add.","    \/\/\/ - Parameter toDoItem: New one from ToDoItemDetail through Save button.","    public func saveToDoItem(toDoItem: ToDoItem) {","        let index = toDoItems.firstIndex {","            $0.id == toDoItem.id","        }","        ","        if let index = index {","            logger.info(\"Updating Item: \\(toDoItem)\")","            toDoItems[index] = toDoItem","            create(item: toDoItem)","        } else {","            logger.info(\"Adding Item: \\(toDoItem)\")","            toDoItems.append(toDoItem)","            create(item: toDoItem)","        }","        ","        \/\/\/Sort as H M L","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                return $1.priority == ToDoPriority.low","            case ToDoPriority.high:","                return true","            }","        })","        ","        logger.info(\"Saved item!\")","        logItems()","    }","    ","    public func disappearCompletedItems(showTime: Double) {","        for item in toDoItems {","            if let completedTime = item.completedAt {","                if (completedTime.foundationDate.timeIntervalSinceNow <= showTime) {","                    remove(toDoItem: item)","                }","            }","        }","    }","    ","    public func remove(at indexSet: IndexSet) {","        for index in indexSet {","            let toDoItem = toDoItems[index]","            delete(item: toDoItem)","        }","        ","        toDoItems.remove(atOffsets: indexSet)","        logItems()","    }","    ","    \/\/\/Query all todo items in DataStore and put them into todoItems","    public func initTodo() {","        let todos = queryAll(type: ToDoItem())","        for todo in todos {","            toDoItems.append(todo)","        }","        toDoItems.sort(by: {","            switch $0.priority {","            case ToDoPriority.low:","                return false","            case ToDoPriority.medium:","                return $1.priority == ToDoPriority.low","            case ToDoPriority.high:","                return true","            }","        })","    }","    ","","    ","    private func logItems() {","        let items = toDoItems.map {","            String(describing: $0)","        }.joined(separator: \"\\n\")","        print(\"Items: \\(toDoItems.count)\\n\\(items)\")","    }","    ","    \/\/\/ Create a new item or update an existing item. DataStore uses id to decide.","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func create<T: Model>(item: T) {","        Amplify.DataStore.save(item) { [weak logger] result in","            switch(result) {","            case .success(let savedItem):","                logger?.debug(\"Saved item: \\(savedItem.self)\")","            case .failure(let error):","                logger?.debug(\"Could not save item to DataStore: \\(error)\")","            }","        }","    }","","    \/\/\/ Query one item according to the query parameter in DataStore and return it","    \/\/\/ - Parameters:","    \/\/\/   - type: Any item following the schema.graphql","    \/\/\/   - queryConditon: Query parameter. For example, ToDoItem.keys.id.eq(toDoItem.id)","    \/\/\/ - Returns: An optional item","    public func query<T: Model>(type: T, queryConditon: QueryPredicate?) -> T? {","        var item: T? = nil","        \/\/\/ And we delete Todo using id equal. 'Where' is the query parameter, here is to query the item with the same id of item.","        Amplify.DataStore.query(T.self, where: queryConditon) { result in","            switch(result) {","            case .success(let outputs):","                guard outputs.count == 1, let output = outputs.first else {","                    logger.error(\"Did not find exactly one todo, bailing\")","                    return","                }","                item = output","            case .failure(let error):","                logger.error(\"Could not query DataStore: \\(error)\")","            }","        }","        return item","    }","","    \/\/\/ Query all items in DataStore and return them","    \/\/\/ - Parameter type: Any item following the schema.graphql","    \/\/\/ - Returns: Array of items","    public func queryAll<T: Model>(type: T) -> [T] {","        var items: [T] = []","        Amplify.DataStore.query(T.self) { result in","            switch(result) {","            case .success(let todos):","                items = todos","            case .failure(let error):","                logger.error(\"Could not query DataStore: \\(error)\")","            }","        }","        return items","    }","    ","    \/\/\/ Delete an item","    \/\/\/ - Parameter Item: An item to be created which must follows the schema.graphql.","    public func delete<T: Model>(item: T) {","        Amplify.DataStore.delete(item) { [weak logger] result in","            switch(result) {","            case .success:","                logger?.debug(\"Deleted item: \\(item.self)\")","            case .failure(let error):","                logger?.debug(\"Could not delete data in DataStore: \\(error)\")","            }","        }","    }","}"],"fileName":"ToDoEnvironment.swift","identifier":"ToDoEnvironment18-1.swift","type":"file","fileType":"swift","highlights":[]},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/GenerateModel#Configure-Amplify-and-DataStore":{"role":"pseudoSymbol","title":"Configure Amplify and DataStore","abstract":[{"type":"text","text":"This tutorial guides you through generating model files and initializing Amplify."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/GenerateModel#Configure-Amplify-and-DataStore","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/generatemodel#Configure-Amplify-and-DataStore"},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/UI":{"role":"project","title":"Implement UI","estimatedTime":"15min","abstract":[{"type":"text","text":"This tutorial guides you through builidng the interface of ToDo app and interacting with DataStore."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/UI","kind":"project","type":"topic","url":"\/tutorials\/todosampleapptutorial\/ui"},"doc://Amazon.ToDoSampleAppTutorial/tutorials/ToDoSampleAppTutorial/DataManipulation#Create-a-ToDoItem":{"role":"pseudoSymbol","title":"Create a ToDoItem","abstract":[{"type":"text","text":"This tutorial guides you through creating, updating, querying, and deleting ToDoitem with DataStore."}],"identifier":"doc:\/\/Amazon.ToDoSampleAppTutorial\/tutorials\/ToDoSampleAppTutorial\/DataManipulation#Create-a-ToDoItem","kind":"section","type":"section","url":"\/tutorials\/todosampleapptutorial\/datamanipulation#Create-a-ToDoItem"},"ToDoMainView0.swift":{"syntax":"swift","content":["import Amplify","import SwiftUI","","\/\/\/ Homepage. Control Add button and TodoList.","public struct ToDoMainView: View {","","    public var body: some View {","","    }","}","","struct ToDoMainView_Previews: PreviewProvider {","    static var previews: some View {","","    }","}"],"fileName":"ToDoMainView.swift","identifier":"ToDoMainView0.swift","type":"file","fileType":"swift","highlights":[]},"ToDoList.swift":{"syntax":"swift","content":["import SwiftUI","import Amplify","","\/\/\/ Display Todo list. Control TodoListRow and ToDoItemDetail. Delete TodoItem.","public struct ToDoList: View {","    @EnvironmentObject var environment: ToDoEnvironment","","    @State var showingDetail: Bool = false","    ","    private var showTime = -3.0","","    let logger: Logger","","    public init(logger: Logger = DefaultLogger()) {","        self.logger = logger","    }","    ","    public var body: some View {","        \/\/\/Display Todo list. Loop can be used in List to display whole elements.","        List {","            ForEach(environment.toDoItems.indices, id: \\.self) { index in","                \/\/\/Click one Todo item, showingDetail to be true, call .sheet to show TodoItemDetail. selectedToDoItem store current Todo item.","                if (environment.toDoItems[index].completedAt == nil) {","                    HStack {","                        Button(action: {","                            logger.info(\"Text in List: \\(environment.toDoItems[index])\")","                            environment.selectedToDoItem = environment.toDoItems[index]","                            environment.showingDetail = true","                        }, label: {","                            \/\/\/Transfer toDoItem to ToDoListRow to display. toDoItem should add $ to keep binding to TodoListRow.","                            ToDoListRow(toDoItem: $environment.toDoItems[index])","                        })","                        .buttonStyle(BorderlessButtonStyle())","                        Spacer()","                        Button(action: {","                            environment.toDoItems[index].completedAt = Temporal.DateTime.now()","                        }, label: {","                            ToDoCheckbox(item: $environment.toDoItems[index])","                        })","                        .frame(width: 60, height: 50)","                    }","                    .listRowBackground(Color.white)","                }","            }","","            \/\/\/Dispay completed ToDo items","            Section(header: Text(\"Completed items\")) {","                ForEach(environment.toDoItems.indices, id: \\.self) { index in","                    if (environment.toDoItems[index].completedAt != nil) {","                        HStack{","                            ToDoListRow(toDoItem: $environment.toDoItems[index])","                            Spacer()","                            Button(action: {","                                environment.toDoItems[index].completedAt = nil","                            }, label: {","                                ToDoCheckboxFill(item: $environment.toDoItems[index])","                            })","                            .frame(width: 60, height: 50)","                        }","                        .animation(.spring())","                    }","                }","            }","        }","        \/\/\/Show ToDoItemDetail view.","        .sheet(isPresented: $environment.showingDetail) {","            ToDoItemDetail()","        }","    }","","}","","struct ToDoList_Previews: PreviewProvider {","    static var previews: some View {","        let env = ToDoEnvironment()","        env.saveToDoItem(toDoItem: ToDoItem(text: \"Eat breakfast\"))","        return ToDoList().environmentObject(env)","    }","}"],"fileName":"ToDoList.swift","identifier":"ToDoList.swift","type":"file","fileType":"swift","highlights":[]}}}